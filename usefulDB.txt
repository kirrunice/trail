dependency:
	<dependency>
			<groupId>com.ibm.db2.jcc</groupId>
			<artifactId>db2jcc4</artifactId>
			<version>10.1</version>
		</dependency>

DB Connection class:

package com.bank.util;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.Map;

public class DatabaseConnection {
	
	/**    
    @MethodName getConnection
	@MethodType Core
    @Summary TBD
    @Author swv481
    @CreationDate TBD
    @PreConditions TBD
    @PostConditions TBD
    @Verification TBD
    @ChangeLog 
	<Date>-<EID>-<ChangeDesc>
	 */
	public static Connection getConnection(String databaseType) throws SQLException {
		Connection conn = null;
		String driverName = null;

		try {
			if (databaseType.equals("oracle")) {
				driverName = "oracle.jdbc.driver.OracleDriver";
				Class.forName(driverName);
				conn = DriverManager.getConnection(
						"jdbc:" + databaseType + ":thin:@"
								+ System.getProperty("bank.oracle.server") + ":"
								+ System.getProperty("bank.oracle.port") + ":"
								+ System.getProperty("bank.oracle.database"),
								System.getProperty("bank.oracle.username"),
								System.getProperty("bank.oracle.password"));
			}else if (databaseType.equals("rsa")){
				driverName = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
				Class.forName(driverName);
				conn = DriverManager.getConnection(
						"jdbc:sqlserver://"
								+ System.getProperty("bank.rsa.server") + ";databaseName="								
								+ System.getProperty("bank.rsa.database"),
								System.getProperty("bank.rsa.username"),
								System.getProperty("bank.rsa.password"));
			} else if (databaseType.equals("ecr")){
				driverName = "com.ibm.db2.jcc.DB2Driver";
				Class.forName(driverName);
				String ecrdb_url="jdbc:db2://"+ System.getProperty("bank.ecr.hostname") +":" + System.getProperty("bank.ecr.port") + "/"+ System.getProperty("bank.ecr.database") +"";
				conn = DriverManager.getConnection(ecrdb_url,System.getProperty("bank.ecr.username"),System.getProperty("bank.ecr.password"));
			} 
		} catch (ClassNotFoundException e) {
			System.out.println(e.toString());
		} catch (SQLException e) {
			MessageLogger.WriteExceptionToConsole("There was an error creating a " + databaseType
					+ " database connection.", e.toString());		
		}
		return conn;
	}
	
	}

Database fetch:

	private static Connection getDBConnection(String dbName) {
		Connection conn = null;
		try {
			if (dbName.toLowerCase().equals("profile")) {
				conn = DatabaseConnection.getConnection("profile");
			} else if (dbName.toLowerCase().equals("oracle")) {
				conn = DatabaseConnection.getConnection("oracle");
			} else if (dbName.toLowerCase().equals("rsa")) {
				conn = DatabaseConnection.getConnection("rsa");
			} else if (dbName.toLowerCase().equals("ecr")) {
				conn = DatabaseConnection.getConnection("ecr");
			} else if (dbName.toLowerCase().equals("oraclesso")) {
				conn = DatabaseConnection.getConnection("ssooracle");
			} else if (dbName.toLowerCase().equals("dashboard")) {
				conn = DatabaseConnection.getConnection("dashboard");
			}
		} catch (SQLException e) {
			MessageLogger.WriteExceptionToConsole("Failed to execute query: " + dbName, e.toString());
		}
		return conn;
	}

Rub DB query:

public static ResultSet runDBQuery(String query, String databaseName) {
		Statement stmt = null;
		ResultSet rSet = null;
		try {
			stmt = getDBConnection(databaseName).createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
					ResultSet.CONCUR_READ_ONLY);
			if (databaseName.toLowerCase().equals("profile")
					&& (query.toUpperCase().startsWith("UPDATE") || query.toUpperCase().startsWith("DELETE")  || query.toUpperCase().startsWith("INSERT"))) {
				stmt.executeUpdate(query);
			} else {
				rSet = stmt.executeQuery(query);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return rSet;
	}

Get db count:


public static int getDBRecCount(ResultSet rSet) {
		int size = 0;
		try {
			while (rSet.next()) {
				size++;
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		try {
			rSet.first();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return size;
	}

Execute query:
public static String getAccountNumber(String CIF, String accountType) {
		Statement stmt = null;
		String accountNumber = null;
		String query = "select cid from acn where type =" + accountType + " and acn = " + CIF + " and stat = 0";
		try {
			Connection conn = DatabaseConnection.getConnection("profile");
			stmt = conn.createStatement();
			ResultSet rs = stmt.executeQuery(query);
			while (rs.next()) {
				accountNumber = rs.getString("cid");
			}
		} catch (SQLException e) {
			MessageLogger.WriteExceptionToConsole("Failed to execute query: " + query, e.toString());
		}
		return accountNumber;
	}
